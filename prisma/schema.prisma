// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  repositories  UserRepositoryAccess[] // Many-to-many with Repository
  logs          Log[]                  // Logs created by the user
  pullRequests  PullRequest[]          // PRs created by the user
  reviews       Review[]               // Reviews created by the user
}

// Account model for OAuth providers (e.g., GitHub)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

// Session model for user sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Verification token for email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// Repository model for GitHub repositories
model Repository {
  id           String       @id @default(cuid())
  githubRepoId String       @unique // GitHub's internal repo ID
  name         String
  owner        String       // GitHub username/organization
  private      Boolean      // Is the repo private?
  url          String       // GitHub repo URL
  workflowEnabled Boolean   @default(false) // Is PR review workflow enabled?
  webhookId    String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relationships
  users       UserRepositoryAccess[] // Many-to-many with User
  logs        Log[]                  // Logs for this repository
  pullRequests PullRequest[]         // PRs for this repository
}

// Many-to-many relationship between User and Repository
model UserRepositoryAccess {
  id           String     @id @default(cuid())
  userId       String
  repositoryId String
  role         Role       @default(VIEWER) // ADMIN, CONTRIBUTOR, or VIEWER
  permissions  Json       // Custom permissions (e.g., { "viewLogs": true })
  invitedBy    String?    // User ID of the inviter (for audit)
  createdAt    DateTime   @default(now())

  // Relationships
  user       User       @relation(fields: [userId], references: [id])
  repository Repository @relation(fields: [repositoryId], references: [id])

  @@unique([userId, repositoryId]) // Ensure unique user-repo pairs
}

// Log model for tracking actions
model Log {
  id           String     @id @default(cuid())
  action       String     // E.g., "WORKFLOW_ENABLED", "USER_ADDED"
  details      Json?      // Additional metadata (e.g., { "userId": "..." })
  createdAt    DateTime   @default(now())

  // Relationships
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  repositoryId String?
  repository Repository? @relation(fields: [repositoryId], references: [id])
}

// Pull Request model for tracking PRs
model PullRequest {
  id           String     @id @default(cuid())
  githubPRId   String     @unique // GitHub's internal PR ID
  title        String
  description  String?
  pullId       Int?
  status       PRStatus   @default(OPEN) // OPEN, CLOSED, MERGED
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relationships
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  reviews      Review[]   // Reviews for this PR
}

// Review model for PR reviews
model Review {
  id           String     @id @default(cuid())
  status       ReviewStatus @default(PENDING) // PENDING, APPROVED, REJECTED
  comments     String?
  createdAt    DateTime   @default(now())

  // Relationships
  pullRequestId String
  pullRequest   PullRequest @relation(fields: [pullRequestId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
}

// Enums for roles, PR status, and review status
enum Role {
  ADMIN
  CONTRIBUTOR
  VIEWER
}

enum PRStatus {
  OPEN
  CLOSED
  MERGED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}